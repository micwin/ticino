migration : general approach 

  being reflection based instead of subclassing and annotating, there is a big migration path from or to tinData.
  Lets demonstrate the migration in case of wicket - which runs nearly out-of-the-box:
  
+--------------------------------
public class WicketApplication extends WebApplication {

  @Override
  public void onEvent(IEvent<?> event) {
	// keep the wicket way functioning
	super.onEvent(event);
	
	// but also support strict typed tinData event handling
	TinData.dispatch (event.getPayload()) ;
  }
}
+--------------------------------
   
   Somewhere else...
   
+--------------------------------
public class NoSink {
   
   public NoSink () {
     TinData.register (MyPayLoad.class , this) ; 
   }
   
   public void blablah (MyPayLoad payload) {
     // doSomething meaningful
   }
   
}

+--------------------------------

    Note that you dont have to unregister - tinData does this for you if the receiver gets gc'ed.   
  
  