------
ticino core library
------

	This module contains the ticino core classes EventScope and DispatchException
	
EventScope

	The main event distrbutor class. Register here to receive its events. 
	
	Think of it as a context for events. For instance, you could define an event scope 
	to process life cycle events, one to process uncaught exceptions, one to process config changes, one to process
	incoming requests, one to process heart beats,... or you could just use a single one and later split responsibilities.

	To control which sort of events are handled by a specific EventScope, you could define a marker interface and use 
	it as a generic type for a EventScope:

+--------------------------------

public class Example2 {

	public static void main (String [] args) {
		// configure an eventscope (normally done somewhere else)
		EventScope <Serializable> eventScope = new EventScope <Serializable> (Serializable.class) ; 
		
		// register a String handler as anonymous adapter
		eventScope.register (String.class, new Object () {
			public void stringHandler(String message) {
				System.out.println ("incoming String '" + message + "'") ; 
			}
		}) ; 

		// register an Integer handler as anonymous adapter
		eventScope.register (Integer.class, new Object () {
			public void intHandler(Integer message) {
				System.out.println ("incoming Integer '" + message + "'") ; 
			}
		}) ; 
		
		// fire a String
		eventScope.dispatch ("Hello, World!") ;	
		
		// fire an Integer
		eventScope.dispatch (42) ;
		
		// fire a double
		eventScope.dispatch (4.5) ; 	
	}	
}
+--------------------------------	
	
	Expected output:
	
+--------------------------------	

incoming String 'Hello, World!'
incoming Integer '42'

+--------------------------------	
	
	The double is not printed since there is no handler registered that 
	prints the double out. Nevertheless, since java.lang.Double implements 
	Serializable, it can get dispatched via this EventScope
	
	
	
DispatchException

	Thrown by an event scope when a handler/receiver throws an exception.
	
	Since this is an unchecked exception, event handlers may decide wether or not to wrap and throw 
	their own checked exceptions.
	
	ticino does automatically wrap any exception that comes out of a handler, no matter whether checked or unchecked.