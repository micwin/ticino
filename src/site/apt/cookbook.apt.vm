cookbook

* General

    to use events, we need at least:
    
    * an event class holding event specific informations (your design):
    
        * what happened - use a descriptive class name
        
        * parameters and context information
        
        * results - information that flows from receiver to dispatcher
    
    * a dispatcher that wants to dispatch events (your design)
    
    * at least one receiver (your design)
    
    * a mediator to bring dispatcher and receiver together (EventScope)

* Example 

+--------------------------------

// the event class we want to dispatch and receive
// Note that this event class is provided by *you*, the developer, not by ticino.

class ShowText {

  private String text ; 
  
  private int count = 0; 

  public ShowText (String pText) {
    this.text = pText ; 
  }

  public String getText () {
    return this.text ; 
  }
  
  // Raises a counter by 1
  public void raise () {
    this.count ++ ; 
  }
  
  public int getCount () {
    return this.count ; 
  }
  
}

// the listener that receives the events

class Listener {
  
  // the receiver method - can have any name and may throw any exception, 
  // but must have the event as sole parameter, and be public.
  
  public void receive (ShowText event) throws IOException {
    System.out.println (event.getText()) ; 
    event.raise () ; 
    
  }

}

// The class to configure and run your application.

class Launcher {

  public static void main (String [] args) {

	// Create the event scope
	EventScope <ShowText> eventScope = new EventScope<ShowText> (ShowText.class) ; 
	
	// Create 10 listeners
	for (int i = 0 ; i < 10 ; i++) {
	  Listener listener = new Listener (eventScope) ;
	  eventScope.register(ShowText.class, listener) ; 
 
	}
	
	// dispatch event
	ShowText event = eventScope.dispatch (new ShowText("Hello, World!")) ; 
	
	// post process results
	System.out.println (event.getCount() +" listeners processed" ); 

  }


}
+--------------------------------
    
* event inheritance

    say we have a general event containing logic and data common to all of your events, ...
    
+--------------------------------
class GeneralEvent {
	// some general stuff
}
+--------------------------------

	... an event containing data for a specific use case and extending GeneralEvent, ...

+--------------------------------
class SpecificEvent extends GeneralEvent {
	// some use case specific data
}
+--------------------------------

    ... a receiver triggered by the general event, ...
    
+--------------------------------
class Receiver {
    public void receive(GeneralEvent event) {
        System.out.println("got event of " + event.getClass());
    }
}
+--------------------------------

   ... a event scope definition
   
+--------------------------------
    EventScope<GeneralEvent> eventScope = new EventScope <GeneralEvent> (GeneralEvent.class) ; 
+--------------------------------
   
    ... some main method bringing event and receiver together (normally you would do that in a spring context) ...
    
+--------------------------------
public static void main(String[] args) {
    eventScope.register(GeneralEvent.class, new Receiver());
}
+--------------------------------

    ... then you could dispatch a specific event like that ...
    
+--------------------------------
// fire specific event
    Specific event evt = new SpecificEvent();
    eventScope.dispatch(evt);
+--------------------------------

    ... and finally get an output like that :

+--------------------------------    
got event of class net.micwin.examples.inheritance.Main$SpecificEvent
+--------------------------------

* migration : general approach 

  being reflection based instead of subclassing and annotating, there is a big migration path from or to ticino.
  Lets demonstrate the migration in case of wicket - which runs nearly out-of-the-box:
  
+--------------------------------
public class WicketApplication extends WebApplication {

  @Autowired
  EventScope <MyPayload> eventScope = new EventScope<MyPayload>(MyPayload.class) ;

  @Override
  public void onEvent(IEvent<MyPayLoad> event) {
	// keep the wicket way functioning
	super.onEvent(event);
	
	// but also support strict typed ticino event handling
	eventScope.dispatch (event.getPayload()) ;
  }
}
+--------------------------------
   
   Somewhere else...
   
+--------------------------------
public class NoSink {
   
   public NoSink () {
     Ticino.register (MyPayLoad.class , this) ; 
   }
   
   public void blablah (MyPayLoad payload) {
     // doSomething meaningful
   }
   
}
+--------------------------------

    Note that you dont have to unregister - ticino does this for you if the receiver gets gc'ed.   
    

* best practices

** Dont use basic types as events

    Althougt ticino allows to use ie java.lang.String or java.lang.Integer as event types, 
    we strongly discourage this approach. In general, use event whose names describe the 
    purpose of the event, or its inner structure. This said, what's the purpose of dispatching a String?
    
** Name your events according to their domain purpose

    Since it is a technical driven naming, IncomingXmlEvent from Example 1 is a discouraged 
    naming for an event. If possible, give more insight into the data provided with this event.
    In case of the given IncomingXmlEvent you probably might say ie UpdateFlightDataXmlEvent instead.
    
** Be careful what you dispatch

    Since ticino senders have no meanings to control who catches their events, you probably 
    shoud avoid including such secret things like passwords etc in your events.
    Also, since they mostly come along with a whole bunch of references, you should think twice including 
	database entities, transaction managers, EJBs, session data et al in your events. It probably might be most 
	useful and of a specific charm throwing a NewRequestEvent, a CreateUserEvent or a LoadMandateEvent 
	as long the drawbacks are well considered.
	
** Use Spring

	Using spring to connect dispatcher and receiver enforces the loose end characteristics of ticino and 
	hence is highly recommended. Of course you might use another DI or IOC framework as well.
	
** xxxEvent vs <not>

    Sometimes, its useful to make explicit the fact that a data structure is an event, sometimes not. I most
    time love short code but only in a context where all participants exactly know the technical 
    background of the software. With above example, instead of UpdateFlightDataXmlEvent, I most likely 
    would prefer IncomingFlightUpdate (and even hide the xml characteristics of the data), but imho 
    that really is a matter of taste. AND, in the case you might reuse a class for multiple purposes,...

  
