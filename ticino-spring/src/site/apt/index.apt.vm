spring integration

   
   To integrate ticino with spring, use the following dependency : 
    
   
+--------------------------------
<dependencies>
  <dependency>
    <groupId>${project.groupId}</groupId>
	  <artifactId>ticino-spring</artifactId>
	  <version>${project.version}</version>
  </dependency>
</dependencies>
+--------------------------------

   You can remove the dependency to ticino-core, this comes along with ticino-spring.
   
   Then, configure your listeners similar to the following snippet in the spring context:

+--------------------------------
<!-- declare an event scope -->
<bean name="eventScope" class="net.micwin.ticino.EventScope" />

<!-- create the configurator as bean -->
<bean class="net.micwin.ticino.spring.Configurator">
	<constructor-arg>
		<map>
			<entry>
				<!-- the event class to register to -->
				<key>
					<value>net.micwin.ticino.test.spring.SpringEvent1</value>
				</key>
				<!-- a list of listener beans to this event. -->
				<list>
					<ref bean="listener1" />
				</list>
			</entry>
			<entry>
				<key>
					<value>net.micwin.ticino.test.spring.SpringEvent2</value>
				</key>
					
				<!-- you also can register multiple listeners to one event class -->
				<list>
					<ref bean="listener2" />
					<ref bean="listener3" />
						
					<!-- provided listener1 has an appropriate receiver method, you of course can reuse it as well -->
					<ref bean="listener1" />
				</list>
			</entry>
		</map>
	</constructor-arg>
	<constructor-arg ref="eventScope" />
</bean>

+--------------------------------

Spring integration - manual registration
    
    In the spring context, as above, create a event scope bean:
    
+--------------------------------
<bean name="eventScope" class="net.micwin.ticino.EventScope" />
+--------------------------------

    Autowire that in a receiver

+--------------------------------
public class Receiver {
    
    @Autowired
    EventScope eventScope ;
    
    private void init () {
        eventScope.register (Payload.class, this) ;
    }
    
    public void receive (Payload payload) {
        // do something meaningful with the received event
    }
}   
+--------------------------------
    
    and in a caller
    
+--------------------------------
public class Caller {
    
    @Autowired
    EventScope eventScope ;
    
    public void doSomething (Payload payload) {
        eventScope.dispatch (payload) ;
    }
}
+--------------------------------    

    Some Notes here
    
    * with both approaches, you can use multiple event scopes at once. They will have a disjunct set of event registrations, that is, receivers.
    
    * make sure to not mix approaches across event types. For instance, configure event Payload either via Configurator or manual registration, not both. 
    
    * You still can use receivers across events; so you, for instance, could still bind listener1 with both methods to disjunct events. 
 